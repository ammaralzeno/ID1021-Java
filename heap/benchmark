import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public class Benchmark {

    public static void main(String[] args) {
        int[] testSizes = {100, 500, 1_000};

        for (int size : testSizes) {
            System.out.println("Benchmarking with size: " + size);
            benchmark(new PriorityQueueO1Add(), size);
            benchmark(new PriorityQueueO1Remove(), size);
            System.out.println("----");
        }
    }

    public static void benchmark(PriorityQueue queue, int size) {
        List<Long> durations = new ArrayList<>();
        Random random = new Random();

        for (int i = 0; i < 1000; i++) {

            long start = System.nanoTime();
            // Generate random data
            for (int j = 0; j < size; j++) {
                queue.add(random.nextInt(size));
            }

            // Measure time
            
            for (int j = 0; j < size; j++) {
                queue.remove();
            }
            long end = System.nanoTime();

            durations.add(end - start);

            // Clear any leftover data
            queue.clear();
        }

        System.out.println(queue.getClass().getSimpleName() + ": " + median(durations) + " ns");
    }

    public static long median(List<Long> durations) {
        Collections.sort(durations);
        int middle = durations.size() / 2;
        return durations.size() % 2 == 1 ? durations.get(middle) : (durations.get(middle - 1) + durations.get(middle)) / 2;
    }
}

interface PriorityQueue {
    void add(int value);

    int remove();

    default void clear() {
        // Optional: Implement this if needed
    }
}
