import java.util.Arrays;

public class selectionsort {



    public static void selectionSort(int[] arr) { // time complexity O(n^2)

        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            // Find the minimum element in the unsorted subarray [i...n-1]
            // and swap it with arr[i]
            int min_idx = i;
            for (int j = i + 1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;

            // Swap the found minimum element with arr[i]
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }

    public static void main(String[] args) {
        final int SIZE = 10000; // Adjust as needed
        final int RUNS = 1000;
        long[] runTimes = new long[RUNS];
        
        for (int r = 0; r < RUNS; r++) {
            int[] arr = generateRandomArray(SIZE);
            
            
            long startTime = System.nanoTime();
            selectionSort(arr);
            long endTime = System.nanoTime();
            
            runTimes[r] = endTime - startTime;
        }
        
        System.out.println("Median runtime: " + getMedian(runTimes) / 1000000 + " ms ");
        System.out.println("Median runtime: " + getMedian(runTimes) + " ns ");
    }

    private static int[] generateRandomArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = (int) (Math.random() * size);
        }
        return arr;
    }

    private static double getMedian(long[] times) {
        int n = times.length;
        Arrays.sort(times);
        if (n % 2 != 0) {
            return (double) times[n / 2];
        }
        return (double) (times[(n - 1) / 2] + times[n / 2]) / 2.0;
    }
}
