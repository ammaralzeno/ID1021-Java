import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class Zip3 {
    Node[] data;
    private static final int RUNS = 1000;

    public static class Node {
        Integer code;
        String name;
        Integer pop;

        public Node(Integer code, String name, Integer pop) {
            this.code = code;
            this.name = name;
            this.pop = pop;
        }
    }

    public Zip3(String file) {
        data = new Node[100000]; // Increase size to 100,000 elements
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] row = line.split(",");
                Integer code = Integer.valueOf(row[0].replaceAll("\\s",""));
                data[code] = new Node(code, row[1], Integer.valueOf(row[2]));
            }
        } catch (Exception e) {
            System.out.println("File " + file + " not found");
            e.printStackTrace();
        }
    }

    public Node lookup(String zip) {
        try {
            Integer code = Integer.valueOf(zip.replaceAll("\\s",""));
            return data[code];
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        String absolutePath = "/Users/ammaralzeno/Downloads/postnummer.csv";

        
        Zip3 zipData = new Zip3("/Users/ammaralzeno/Downloads/postnummer.csv");

        long[] lookupTimes1 = new long[RUNS];
        long[] lookupTimes2 = new long[RUNS];

         // Assuming ZipData is a predefined class
         for (int i = 0; i < RUNS; i++) {
            long start2 = System.nanoTime();
            Node node2 = zipData.lookup("11115");
            long end2 = System.nanoTime();
            lookupTimes2[i] = end2 - start2;
        }
        
        // Generate lookup times for "46196"
        for (int i = 0; i < RUNS; i++) {
            long start1 = System.nanoTime();
            Node node1 = zipData.lookup("46169");
            long end1 = System.nanoTime();
            lookupTimes1[i] = end1 - start1;
        }

        // Generate lookup times for "98499"
        

        // Calculate and display median lookup time for "46196"
        Arrays.sort(lookupTimes1);
        long medianTime1 = (lookupTimes1[RUNS / 2] + lookupTimes1[(RUNS - 1) / 2]) / 2;
        System.out.println("Median Direct Lookup Time for 46196: " + medianTime1 + "ns");

        // Calculate and display median lookup time for "98499"
        Arrays.sort(lookupTimes2);
        long medianTime2 = (lookupTimes2[RUNS / 2] + lookupTimes2[(RUNS - 1) / 2]) / 2;
        System.out.println("Median Direct Lookup Time for 98499: " + medianTime2 + "ns");
    
        
        

        
        // If you've implemented a binary search method, you can benchmark it here for comparison.
    }
}
