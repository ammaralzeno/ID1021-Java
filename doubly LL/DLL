public class DoublyLinkedList {

    class Node {
        int data;
        Node next;
        Node prev;

        public Node(int data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }

    private Node head;

    public DoublyLinkedList() {
        head = null;
    }

    // Add an item as the first cell in the sequence.
    public void add(int item) {
        Node newNode = new Node(item);
        newNode.next = head;
        if (head != null) {
            head.prev = newNode;
        }
        head = newNode;
    }

    // Return the length of the sequence.
    public int length() {
        int length = 0;
        Node current = head;
        while (current != null) {
            length++;
            current = current.next;
        }
        return length;
    }

    // Find if an item exists in the sequence.
    public boolean find(int item) {
        Node current = head;
        while (current != null) {
            if (current.data == item) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Remove an item from the sequence.
    public void remove(int item) {
        Node current = head;
        while (current != null) {
            if (current.data == item) {
                if (current.prev != null) {
                    current.prev.next = current.next;
                } else {
                    head = current.next;
                }
                if (current.next != null) {
                    current.next.prev = current.prev;
                }
                return;
            }
            current = current.next;
        }
    }

    // Unlink a given node from the list.
    public void unlink(Node node) {
        if (node.prev != null) {
            node.prev.next = node.next;
        } else {
            head = node.next;
        }
        if (node.next != null) {
            node.next.prev = node.prev;
        }
    }

    // Insert a node as the first cell in the list.
    public void insertFirst(Node node) {
        node.next = head;
        if (head != null) {
            head.prev = node;
        }
        head = node;
        node.prev = null;
    }

    // Utility function to print list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.add(10);
        list.add(20);
        list.add(30);
        list.printList(); // 30 20 10

        System.out.println(list.find(20)); // true
        System.out.println(list.find(40)); // false

        list.remove(20);
        list.printList(); // 30 10

        Node node = list.new Node(50);
        list.insertFirst(node);
        list.printList(); // 50 30 10

        list.unlink(node);
        list.printList(); // 30 10
    }
}
