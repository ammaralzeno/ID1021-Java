import java.util.Arrays;
import java.util.Random;

public class QuickSort {

    static final int SIZE = 100000;
    static final int RUNS = 1000;

    void Sort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            Sort(arr, low, pivotIndex - 1);
            Sort(arr, pivotIndex + 1, high);
        }
    }



    int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);  // Index of smaller element
        for (int j = low; j < high; j++) {
            // If current element is smaller than the pivot
            if (arr[j] < pivot) {
                i++;
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // A utility function to print array of size n
    static void printArray(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {10, 7, 15, 9, 1, 5};
        int n = arr.length;

        QuickSort ob = new QuickSort();
        ob.Sort(arr, 0, n - 1);

        System.out.println("Sorted array: ");
        printArray(arr);


            long[] arrayDurations = new long[RUNS];

    
            for (int run = 0; run < RUNS; run++) {
                int[] array = new int[SIZE];
                Random random = new Random(run);  // Same seed ensures same numbers
    
                // Generate random numbers
                for (int i = 0; i < SIZE; i++) {
                    int value = random.nextInt(SIZE);
                    array[i] = value;
                }
    
                // Benchmark for array quick sort
                long startTimeArray = System.nanoTime();
                ob.Sort(array, 0, array.length - 1);
                long endTimeArray = System.nanoTime();
                arrayDurations[run] = endTimeArray - startTimeArray;
    
            }
    
            Arrays.sort(arrayDurations);

    
            long medianDurationArray = arrayDurations[RUNS / 2];
    
            System.out.println("Median time for array quick sort: " + medianDurationArray + " ns");

        }
    }

